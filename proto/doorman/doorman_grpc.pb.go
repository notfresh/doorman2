// Code generated by protoc-gen-go-grpc. DO NOT EDIT.
// versions:
// - protoc-gen-go-grpc v1.2.0
// - protoc             v3.17.3
// source: doorman.proto

package doorman

import (
	context "context"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
)

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
// Requires gRPC-Go v1.32.0 or later.
const _ = grpc.SupportPackageIsVersion7

// CapacityClient is the client API for Capacity service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
type CapacityClient interface {
	// Used by clients to discover the master Doorman server.
	Discovery(ctx context.Context, in *DiscoveryRequest, opts ...grpc.CallOption) (*DiscoveryResponse, error)
	// Used by clients to obtain capacity from Doorman.
	GetCapacity(ctx context.Context, in *GetCapacityRequest, opts ...grpc.CallOption) (*GetCapacityResponse, error)
	// Used by Doorman servers to get capacity on behalf of their clients from
	// lower level Doorman servers.
	GetServerCapacity(ctx context.Context, in *GetServerCapacityRequest, opts ...grpc.CallOption) (*GetServerCapacityResponse, error)
	// Used by clients to release any capacity they have for one or more
	// resources.
	ReleaseCapacity(ctx context.Context, in *ReleaseCapacityRequest, opts ...grpc.CallOption) (*ReleaseCapacityResponse, error)
}

type capacityClient struct {
	cc grpc.ClientConnInterface
}

func NewCapacityClient(cc grpc.ClientConnInterface) CapacityClient {
	return &capacityClient{cc}
}

func (c *capacityClient) Discovery(ctx context.Context, in *DiscoveryRequest, opts ...grpc.CallOption) (*DiscoveryResponse, error) {
	out := new(DiscoveryResponse)
	err := c.cc.Invoke(ctx, "/doorman.Capacity/Discovery", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *capacityClient) GetCapacity(ctx context.Context, in *GetCapacityRequest, opts ...grpc.CallOption) (*GetCapacityResponse, error) {
	out := new(GetCapacityResponse)
	err := c.cc.Invoke(ctx, "/doorman.Capacity/GetCapacity", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *capacityClient) GetServerCapacity(ctx context.Context, in *GetServerCapacityRequest, opts ...grpc.CallOption) (*GetServerCapacityResponse, error) {
	out := new(GetServerCapacityResponse)
	err := c.cc.Invoke(ctx, "/doorman.Capacity/GetServerCapacity", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *capacityClient) ReleaseCapacity(ctx context.Context, in *ReleaseCapacityRequest, opts ...grpc.CallOption) (*ReleaseCapacityResponse, error) {
	out := new(ReleaseCapacityResponse)
	err := c.cc.Invoke(ctx, "/doorman.Capacity/ReleaseCapacity", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// CapacityServer is the server API for Capacity service.
// All implementations must embed UnimplementedCapacityServer
// for forward compatibility
type CapacityServer interface {
	// Used by clients to discover the master Doorman server.
	Discovery(context.Context, *DiscoveryRequest) (*DiscoveryResponse, error)
	// Used by clients to obtain capacity from Doorman.
	GetCapacity(context.Context, *GetCapacityRequest) (*GetCapacityResponse, error)
	// Used by Doorman servers to get capacity on behalf of their clients from
	// lower level Doorman servers.
	GetServerCapacity(context.Context, *GetServerCapacityRequest) (*GetServerCapacityResponse, error)
	// Used by clients to release any capacity they have for one or more
	// resources.
	ReleaseCapacity(context.Context, *ReleaseCapacityRequest) (*ReleaseCapacityResponse, error)
	mustEmbedUnimplementedCapacityServer()
}

// UnimplementedCapacityServer must be embedded to have forward compatible implementations.
type UnimplementedCapacityServer struct {
}

func (UnimplementedCapacityServer) Discovery(context.Context, *DiscoveryRequest) (*DiscoveryResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method Discovery not implemented")
}
func (UnimplementedCapacityServer) GetCapacity(context.Context, *GetCapacityRequest) (*GetCapacityResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetCapacity not implemented")
}
func (UnimplementedCapacityServer) GetServerCapacity(context.Context, *GetServerCapacityRequest) (*GetServerCapacityResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetServerCapacity not implemented")
}
func (UnimplementedCapacityServer) ReleaseCapacity(context.Context, *ReleaseCapacityRequest) (*ReleaseCapacityResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method ReleaseCapacity not implemented")
}
func (UnimplementedCapacityServer) mustEmbedUnimplementedCapacityServer() {}

// UnsafeCapacityServer may be embedded to opt out of forward compatibility for this service.
// Use of this interface is not recommended, as added methods to CapacityServer will
// result in compilation errors.
type UnsafeCapacityServer interface {
	mustEmbedUnimplementedCapacityServer()
}

func RegisterCapacityServer(s grpc.ServiceRegistrar, srv CapacityServer) {
	s.RegisterService(&Capacity_ServiceDesc, srv)
}

func _Capacity_Discovery_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(DiscoveryRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(CapacityServer).Discovery(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/doorman.Capacity/Discovery",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(CapacityServer).Discovery(ctx, req.(*DiscoveryRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Capacity_GetCapacity_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetCapacityRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(CapacityServer).GetCapacity(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/doorman.Capacity/GetCapacity",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(CapacityServer).GetCapacity(ctx, req.(*GetCapacityRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Capacity_GetServerCapacity_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetServerCapacityRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(CapacityServer).GetServerCapacity(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/doorman.Capacity/GetServerCapacity",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(CapacityServer).GetServerCapacity(ctx, req.(*GetServerCapacityRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Capacity_ReleaseCapacity_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(ReleaseCapacityRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(CapacityServer).ReleaseCapacity(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/doorman.Capacity/ReleaseCapacity",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(CapacityServer).ReleaseCapacity(ctx, req.(*ReleaseCapacityRequest))
	}
	return interceptor(ctx, in, info, handler)
}

// Capacity_ServiceDesc is the grpc.ServiceDesc for Capacity service.
// It's only intended for direct use with grpc.RegisterService,
// and not to be introspected or modified (even as a copy)
var Capacity_ServiceDesc = grpc.ServiceDesc{
	ServiceName: "doorman.Capacity",
	HandlerType: (*CapacityServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "Discovery",
			Handler:    _Capacity_Discovery_Handler,
		},
		{
			MethodName: "GetCapacity",
			Handler:    _Capacity_GetCapacity_Handler,
		},
		{
			MethodName: "GetServerCapacity",
			Handler:    _Capacity_GetServerCapacity_Handler,
		},
		{
			MethodName: "ReleaseCapacity",
			Handler:    _Capacity_ReleaseCapacity_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "doorman.proto",
}
